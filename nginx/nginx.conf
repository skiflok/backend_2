events {

}

http {

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    log_format debug_logs '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        '"upstream: $upstream_addr" "upstream_status: $upstream_status" '
                        '"upstream_response_time: $upstream_response_time"';

    access_log /var/log/nginx/access.log debug_logs;
#     access_log /var/log/nginx/access.log main;
#     error_log /var/log/nginx/error.log warn;
    error_log /var/log/nginx/error.log debug;

    include mime.types;

    # Включить gzip-сжатие
    gzip on;

    # Уровень сжатия (от 1 до 9, 6 — оптимальный компромисс между скоростью и степенью сжатия)
    gzip_comp_level 6;

    # Минимальный размер ответа для сжатия (в байтах)
    gzip_min_length 1000;

    # Буферы для хранения сжатых данных
    gzip_buffers 16 8k;

    # Протоколы HTTP, для которых включено сжатие
    gzip_http_version 1.1;

    # Исключить сжатие для определенных User-Agent'ов
    gzip_disable "msie6";

    # Типы содержимого, которые следует сжимать
    gzip_types
        text/plain
        text/css
        text/javascript
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        application/vnd.ms-fontobject
        font/ttf
        font/opentype
        image/svg+xml;

    # Не сжимать данные, если они уже сжаты
    gzip_proxied any;

    # Отключить сжатие для медиа-типов
    gzip_types !image/jpeg !image/png !image/gif !image/webp !audio/* !video/*;

    # Определение backend для каждого метода
    map $request_method $backend_pool {
        default non_get_backend;
        GET     backend;
    }

    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=100m inactive=60m use_temp_path=off;

    upstream backend {
        server backend_primary:9999 weight=2;
        server backend_db_ro-1:9999 weight=1;
        server backend_db_ro-2:9999 weight=1;
    }

    upstream non_get_backend {
        server backend_primary:9999;
    }

    upstream pg_admin {
        server adminer:80;
    }

    server {
        listen 80;

        # Маршрутизация для /api
        location /api {
            rewrite ^/api(/.*)?$ /api/v1$1 break;
            proxy_pass http://$backend_pool;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location = /test {
            return 200 "test1";
        }

        # раздача сваггера
        location /api/v1 {

            proxy_cache my_cache;               # Включаем кеш
            proxy_cache_methods GET;            # Кешируем только GET-запросы
            proxy_cache_valid 200 302 10m;      # Кешируем успешные ответы на 10 минут
            proxy_cache_valid 404 1m;           # Ошибки 404 кешируем на 1 минуту
            proxy_ignore_headers Cache-Control Expires; # Игнорируем заголовки от сервера
            add_header X-Cache-Status $upstream_cache_status; # Добавляем заголовок для проверки кеша

            rewrite ^/api/v1/(.*)$ /swagger/$1 break;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # раздача доков и конфигов сваггера
        location /docs {
            proxy_cache my_cache;               # Включаем кеш
            proxy_cache_methods GET;            # Кешируем только GET-запросы
            proxy_cache_valid 200 302 10m;      # Кешируем успешные ответы на 10 минут
            proxy_cache_valid 404 1m;           # Ошибки 404 кешируем на 1 минуту
            proxy_ignore_headers Cache-Control Expires; # Игнорируем заголовки от сервера
            add_header X-Cache-Status $upstream_cache_status; # Добавляем заголовок для проверки кеша

            proxy_pass http://backend/docs;
            proxy_set_header Host $host;
        }

        # static
        location / {
            root /static;
            proxy_cache my_cache;               # Используем кеш
            proxy_cache_valid 200 302 10m;      # Кешируем успешные ответы на 10 минут
            proxy_cache_valid 404 1m;          # Ошибки 404 кешируем на 1 минуту
            proxy_ignore_headers Cache-Control Expires; # Игнорируем заголовки от бэкенда
            add_header X-Cache-Status $upstream_cache_status; # Добавляем заголовок для проверки кеша
        }

        # pg_admin
        location /admin {
            proxy_set_header X-Script-Name /admin;
            proxy_pass http://pg_admin;
        }

         location /status {
            stub_status;
        }
    }
}
